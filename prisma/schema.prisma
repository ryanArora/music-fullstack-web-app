generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model Artist {
    id        String   @id @default(cuid())
    name      String
    imageUrl  String
    songs     Song[]
    albums    Album[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Song {
    id          String         @id @default(cuid())
    title       String
    duration    Int // in seconds
    imageUrl    String
    artistId    String
    artist      Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
    albumId     String
    album       Album          @relation(fields: [albumId], references: [id], onDelete: Cascade)
    playlists   PlaylistSong[]
    genre       String?
    releaseDate DateTime
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    @@index([title])
    @@index([artistId])
    @@index([albumId])
}

model Album {
    id          String    @id @default(cuid())
    title       String
    imageUrl    String
    artistId    String
    artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
    songs       Song[]
    releaseDate DateTime
    type        AlbumType @default(ALBUM)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([title])
    @@index([artistId])
}

enum AlbumType {
    ALBUM
    EP
    SINGLE
}

model Playlist {
    id        String         @id @default(cuid())
    title     String
    imageUrl  String?
    songs     PlaylistSong[]
    isPublic  Boolean        @default(true)
    isLiked   Boolean        @default(false)
    userId    String?
    user      User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@index([title])
    @@index([userId])
}

model PlaylistSong {
    id         String   @id @default(cuid())
    playlistId String
    playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    songId     String
    song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
    order      Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([playlistId])
    @@index([songId])
}

// NextAuth.js Models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    playlists     Playlist[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
